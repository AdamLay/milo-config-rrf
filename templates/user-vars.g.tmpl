; user-vars.g
; Holds user-configurable values and overrides for Milo RepRapFirmware configuration.
; Generated by the Milo Configurator at: 
; ${(new Date()).toString()}

; Set machine name
global machineName="${f['machine_name']}"

; Set features
set global.featureToolSetter=${ft.includes("toolsetter")}
set global.featureTouchProbe=${ft.includes("touchprobe")}
set global.featureVSSC=${ft.includes("vssc")}
set global.featureCasa=${ft.includes("casa")}
set global.featureLeds=${ft.includes("leds")}
set global.featureScreen=${ft.includes("screen")}

; Web UI Password
global dwcPassword="${f['dwc_password']}"

global parkX={(global.xMax - global.xMin)/2} ; Park approximately in the middle
global parkY=global.yMax                     ; and at the front for operator ease-of-use.
global parkZ=global.zMax                     ; Think VERY hard before parking this anywhere else

; Confirm with operator on calculated probe moves
global confirmUnsafeMove = ${f['confirm_unsafe_moves'] == "1"}

; Confirm with operator after tool probing
global confirmToolChange = ${f['confirm_tool_changes'] == "1"}

; Safe distance above probed work pieces for travel moves
global safeDistanceZ     = ${f['safe_z_distance']}

; Daemon settings
; Required for featureLeds and featureHSSC.
global daemonEnable=true     ; Run background tasks in daemon.g
global daemonUpdateRate=500  ; Re-trigger background tasks every 1000ms

; WiFi Mode
set global.wifiAccessPoint = ${f['network_mode'] == NET_MODE_CLIENT ? 'false' : 'true'}

; Set motor currents
set global.motorCurrentLimitX=${f['motor_current']}
set global.motorCurrentLimitY=${f['motor_current']}
set global.motorCurrentLimitZ=${f['motor_current']}

; Set Standstill Currents
set global.motorHoldCurrentPercentX=30
set global.motorHoldCurrentPercentY=30
set global.motorHoldCurrentPercentZ=15